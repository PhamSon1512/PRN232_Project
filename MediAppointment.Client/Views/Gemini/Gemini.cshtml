@model string
@{
    ViewData["Title"] = "MediAppointment Chatbot";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        #chat-container {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            padding: 1rem;
            background-color: #f8f9fa;
            border-radius: 0.375rem;
            margin-bottom: 1rem;
        }

        .user-message {
            background-color: #007bff;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.75rem;
            margin: 0.5rem 0;
            max-width: 70%;
            align-self: flex-end;
            margin-left: auto;
        }

        .bot-message {
            background-color: #e9ecef;
            color: #212529;
            padding: 0.5rem 1rem;
            border-radius: 0.75rem;
            margin: 0.5rem 0;
            max-width: 70%;
            align-self: flex-start;
        }
    </style>
}

<div class="container mt-4">
    <h1 class="text-center mb-4">MediAppointment Chatbot</h1>

    <div id="chat-container">
        <div class="bot-message">Chào bạn! Tôi là chatbot MediAppointment, tôi đang hoạt động tốt. Bạn khỏe không? Hôm nay tôi có thể giúp gì cho bạn?</div>
        @if (!string.IsNullOrEmpty(ViewBag.ChatResponse))
        {
            <div class="bot-message">@ViewBag.ChatResponse</div>
        }
    </div>

    <form id="chat-form" class="mb-4">
        @Html.AntiForgeryToken()
        <div class="input-group">
            <input type="text" id="message-input" name="message" class="form-control" placeholder="Nhập tin nhắn..." value="@Model" required>
            <button type="submit" class="btn btn-primary"><i class="fas fa-paper-plane"></i> Gửi</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#chat-form').on('submit', async function (e) {
                e.preventDefault();
                const messageInput = $('#message-input');
                const sendButton = $('#send-button');
                const message = messageInput.val().trim();

                if (!message) return;

                // Disable nút gửi và hiển thị trạng thái loading
                sendButton.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Đang gửi...');

                // Thêm tin nhắn của người dùng vào khung chat
                addMessageToChat('user', message);
                messageInput.val('');

                // Thêm loading message
                const loadingId = addLoadingMessage();

                try {
                    // FIX: Đổi URL từ '/Gemini/Chat' thành '/Gemini/SendMessage' để khớp với controller routing
                    const response = await fetch('/Gemini/SendMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // FIX: Sửa header name từ 'X-CSRF-TOKEN' thành 'RequestVerificationToken'
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify({ message: message })
                    });

                    const contentType = response.headers.get('content-type');
                    console.log(`Response: Status=${response.status}, ContentType=${contentType}`);

                    // Remove loading message
                    removeLoadingMessage(loadingId);

                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    if (!contentType || !contentType.includes('application/json')) {
                        const responseText = await response.text();
                        console.error('Non-JSON response:', responseText);
                        addMessageToChat('bot', `Lỗi: Phản hồi từ server không phải JSON. Status: ${response.status}`);
                        return;
                    }

                    const data = await response.json();
                    console.log('Parsed response data:', data);

                    if (data.success) {
                        addMessageToChat('bot', data.data || 'Không nhận được phản hồi từ chatbot.');
                    } else {
                        addMessageToChat('bot', `Lỗi: ${data.errorMessage || 'Không thể xử lý phản hồi từ server.'}`);
                    }

                } catch (error) {
                    console.error('Request error:', error);
                    // Remove loading message if still exists
                    removeLoadingMessage(loadingId);
                    addMessageToChat('bot', `Lỗi kết nối: ${error.message}`);
                } finally {
                    // Re-enable nút gửi
                    sendButton.prop('disabled', false).html('<i class="fas fa-paper-plane"></i> Gửi');
                }
            });

            function addMessageToChat(sender, message) {
                const chatContainer = $('#chat-container');
                const messageElement = $('<div></div>')
                    .addClass(sender === 'user' ? 'user-message' : 'bot-message')
                    .text(message);
                chatContainer.append(messageElement);
                chatContainer.scrollTop(chatContainer[0].scrollHeight);
                return messageElement;
            }

            function addLoadingMessage() {
                const loadingMessage = addMessageToChat('bot', '...');
                loadingMessage.addClass('loading-dots');
                return loadingMessage;
            }

            function removeLoadingMessage(loadingElement) {
                if (loadingElement) {
                    loadingElement.remove();
                }
            }

            // Gửi tin nhắn khi nhấn Enter
            $('#message-input').on('keypress', function (e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    $('#chat-form').trigger('submit');
                }
            });

            // Focus vào input khi trang load
            $('#message-input').focus();
        });
    </script>
}